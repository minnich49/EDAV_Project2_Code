pairs(boston)
cov(boston)
test = cov(boston)
test
test[1.]
test[1,]
test = cor(boston)
test[1.]
test[1,]
cor(boston)[1,]
crimecorr = cor(boston)[1,]
crimecorr
print(crimecorr)
print(sort(crimecorr))
print(sort(abs(crimecorr))
print(sort(abs(crimecorr)))
print(sort(abs(crimecorr)))
View(boston)
logfit = glm(crim ~ ., data = weekly,family="binomial")
logfit = glm(crim ~ ., data = boston,family="binomial")
Crime <- rep(0, length(boston$crim ))
Crime = rep(0, length(boston$crim ))
Crime[boston$crim > median(boston$crim )] <- 1
boston <- data.frame(boston, Crime)
logfit = glm(Crime ~ ., data = boston, family="binomial")
logfit = glm(Crime ~ -crim., data = boston, family="binomial")
logfit = glm(Crime ~ . -crim, data = boston, family="binomial")
summary(logfit)
responses = predict(logfit,boston, type = "response")
inter = rep("0", nrow(boston))
inter[responses > 0.5] = "1"
table(inter, (boston$Crime))
mean(inter == boston$Crime)
logfit = glm(Crime ~ . -crim -zn, data = boston, family="binomial")
summary(logfit)
#Confusion Matrix
responses = predict(logfit,boston, type = "response")
inter = rep("0", nrow(boston))
inter[responses > 0.5] = "1"
table(inter, (boston$Crime))
mean(inter == boston$Crime)
logfit = glm(Crime ~ rad + tax + lstat, data = boston, family="binomial")
summary(logfit)
#Confusion Matrix
responses = predict(logfit,boston, type = "response")
inter = rep("0", nrow(boston))
inter[responses > 0.5] = "1"
table(inter, (boston$Crime))
mean(inter == boston$Crime)
logfit = glm(Crime ~ . -crim, data = boston, family="binomial")
summary(logfit)
#Confusion Matrix
responses = predict(logfit,boston, type = "response")
inter = rep("0", nrow(boston))
inter[responses > 0.5] = "1"
table(inter, (boston$Crime))
mean(inter == boston$Crime)
ldafitE = lda(Crime ~ . -crim, data = boston)
summary(logfitD)
summary(ldafitE)
ldafitE = lda(Crime ~ . -crim, data = boston)
summary(ldafitE)
#Confusion Matrix
responses = predict(ldafitE,boston, type = "response")
table(responses$class, (boston$Crime))
mean(inter == boston$Crime)
?sample
train <- sample(1:nrow(boston))
train
length(train)
length(boston)
dim(boston)
train <- sample(1:nrow(boston),size = nrow(boston)*4/5)
length(train)
set.seed(1)
#1/5 to test, 4/5 to train
train = sample(1:nrow(boston),size = nrow(boston)*4/5)
test = -train
test = boston[training,]
training = sample(1:nrow(boston),size = nrow(boston)*4/5)
testing = -training
test = boston[training,]
training = sample(1:nrow(boston),size = nrow(boston)*4/5)
testing = -training
train = boston[training,]
test = boston[test,]
test = boston[testing,]
training = sample(1:nrow(boston),size = nrow(boston)*4/5)
testing = -training
train = boston[training,]
test = boston[testing,]
logfit = glm(Crime ~ . -crim, data = train, family="binomial")
summary(logfit)
#Confusion Matrix
responses = predict(logfit,boston, type = "response")
inter = rep("0", nrow(boston))
inter[responses > 0.5] = "1"
table(inter, (boston$Crime))
mean(inter == boston$Crime)
responses = predict(logfit,test, type = "response")
inter = rep("0", nrow(test))
inter[responses > 0.5] = "1"
table(inter, (test$Crime))
mean(inter == test$Crime)
logfit = glm(Crime ~ . -crim -zn -indus, data = train, family="binomial")
summary(logfit)
logfit = glm(Crime ~ . -crim -zn -indus-chas-rm-lstat, data = train, family="binomial")
summary(logfit)
#Confusion Matrix
responses = predict(logfit,test, type = "response")
inter = rep("0", nrow(test))
inter[responses > 0.5] = "1"
table(inter, (test$Crime))
mean(inter == test$Crime)
logfit = glm(Crime ~ . -crim -zn -indus-chas-rm, data = train, family="binomial")
summary(logfit)
#Confusion Matrix
responses = predict(logfit,test, type = "response")
inter = rep("0", nrow(test))
inter[responses > 0.5] = "1"
table(inter, (test$Crime))
mean(inter == test$Crime)
logfit = glm(Crime ~ . -crim -zn, data = train, family="binomial")
summary(logfit)
#Confusion Matrix
responses = predict(logfit,test, type = "response")
inter = rep("0", nrow(test))
inter[responses > 0.5] = "1"
table(inter, (test$Crime))
mean(inter == test$Crime)
logfit = glm(Crime ~ . -crim , data = train, family="binomial")
summary(logfit)
#Confusion Matrix
responses = predict(logfit,test, type = "response")
inter = rep("0", nrow(test))
inter[responses > 0.5] = "1"
table(inter, (test$Crime))
mean(inter == test$Crime)
ldafitE = lda(Crime ~ . -crim, data = train)
summary(ldafitE)
library(MASS)
ldafitE = lda(Crime ~ . -crim, data = train)
summary(ldafitE)
#Confusion Matrix
responses = predict(ldafitE,test, type = "response")
table(responses$class, (test$Crime))
mean(inter == test$Crime)
(50 + 35)/nrow(test)
cor(boston)
ldafitE = lda(Crime ~ rad, data = train)
summary(ldafitE)
#Confusion Matrix
responses = predict(ldafitE,test, type = "response")
table(responses$class, (test$Crime))
#Percentage Correct
(50 + 35)/nrow(test)
ldafitE = lda(Crime ~ I(rad)^3, data = train)
summary(ldafitE)
#Confusion Matrix
responses = predict(ldafitE,test, type = "response")
table(responses$class, (test$Crime))
#Percentage Correct
(50 + 35)/nrow(test)
ldafitE = lda(Crime ~ . - crim, data = train)
summary(ldafitE)
#Confusion Matrix
responses = predict(ldafitE,test, type = "response")
table(responses$class, (test$Crime))
#Percentage Correct
(50 + 35)/nrow(test)
ldafitE = lda(Crime ~ . - crim - nox - chas -lstat, data = train)
summary(ldafitE)
#Confusion Matrix
responses = predict(ldafitE,test, type = "response")
table(responses$class, (test$Crime))
#Percentage Correct
(50 + 35)/nrow(test)
(49 + 39)/nrow(test)
ldafitE = lda(Crime ~ . - crim - nox - chas, data = train)
summary(ldafitE)
#Confusion Matrix
responses = predict(ldafitE,test, type = "response")
table(responses$class, (test$Crime))
#Percentage Correct
(49 + 39)/nrow(test)
logfit = glm(Crime ~ . - crim - nox - chas, data = train, family="binomial")
summary(logfit)
#Confusion Matrix
responses = predict(logfit,test, type = "response")
inter = rep("0", nrow(test))
inter[responses > 0.5] = "1"
table(inter, (test$Crime))
mean(inter == test$Crime)
ldafitE = lda(Crime ~ . - crim, data = train)
summary(ldafitE)
#Confusion Matrix
responses = predict(ldafitE,test, type = "response")
table(responses$class, (test$Crime))
#Percentage Correct
(49 + 39)/nrow(test)
(50 + 35)/nrow(test)
ldafitE = lda(Crime ~ . - crim - nox - chas, data = train)
summary(ldafitE)
#Confusion Matrix
responses = predict(ldafitE,test, type = "response")
table(responses$class, (test$Crime))
#Percentage Correct
(49 + 39)/nrow(test)
```{r}
library(class)
knnout =  knn(data.frame(train$Lag2),data.frame(test$Lag2),train$Direction, k = 1)
View(train)
knnout =  knn(data.frame(train),data.frame(test),train$Crime, k = 1)
#Confusion Matrix
table(knnout, (test$Direction))
knnout =  knn(data.frame(train),data.frame(test),train$Crime, k = 1)
table(knnout, (test$Direction))
table(knnout, (test$Crime))
(47+48)/nrow(test)
knnout =  knn(data.frame(train[-crim,]),data.frame(test),train$Crime, k = 1)
knnout =  knn(data.frame(train[-train$crim,]),data.frame(test),train$Crime, k = 1)
knnout =  knn(data.frame(train[-train$crim,]),data.frame(test[-train$crim,]),train$Crime, k = 1)
KNNtrain = train[-train$crim,]
KNNtrain
View(KNNtrain)
KNNtrain = train[,-train$crim]
KNNtrain = train[,-crim]
KNNtrain = train[,-1]
View(KNNtrain)
KNNtest = test[,-1]
knnout =  knn(data.frame(KNNtrain),data.frame(KNNtest),train$Crime, k = 1)
#Confusion Matrix
table(knnout, (test$Crime))
View(KNNtrain)
View(KNNtest)
KNNtrain = train[,c(-1,-15)]
KNNtrain = train[,c(-1,-15)]
KNNtest = test[,c(-1,-15)]
View(KNNtest)
View(KNNtrain)
knnout =  knn(data.frame(KNNtrain),data.frame(KNNtest),train$Crime, k = 1)
table(knnout, (test$Crime))
knnout =  knn(data.frame(KNNtrain),data.frame(KNNtest),KNNtrain$Crime, k = 1)
knnout =  knn(data.frame(KNNtrain),data.frame(KNNtest),KNNtrain$Crime, k = 1)
knnout =  knn(data.frame(KNNtrain),data.frame(KNNtest),train$Crime, k = 1)
test
table(knnout, (test$Crime))
(47+48)/nrow(test)
train$Crime
KNNtrain = train[,c(-1,-15)]
KNNtest = test[,c(-1,-15)]
knnout =  knn(data.frame(KNNtrain),data.frame(KNNtest),train$Crime, k = 5)
#Confusion Matrix
table(knnout, (test$Crime))
#Percentage Correct
(47+48)/nrow(test)
KNNtrain = train[,c(-1,-15)]
KNNtest = test[,c(-1,-15)]
knnout =  knn(data.frame(KNNtrain),data.frame(KNNtest),train$Crime, k = 10)
#Confusion Matrix
table(knnout, (test$Crime))
#Percentage Correct
(47+48)/nrow(test)
(44+47)/nrow(test)
KNNtrain = train[,c(-1,-15,-2,-3,-4,-5)]
KNNtest = test[,c(-1,-15,-2,-3,-4,-5)]
knnout =  knn(data.frame(KNNtrain),data.frame(KNNtest),train$Crime, k = 10)
#Confusion Matrix
table(knnout, (test$Crime))
#Percentage Correct
(45 +45)/nrow(test)
knnout =  knn(data.frame(KNNtrain),data.frame(KNNtest),train$Crime, k = 1)
#Confusion Matrix
table(knnout, (test$Crime))
#Percentage Correct
(45 +45)/nrow(test)
knnout =  knn(data.frame(KNNtrain),data.frame(KNNtest),train$Crime, k = 10)
#Confusion Matrix
table(knnout, (test$Crime))
#Percentage Correct
(45 +45)/nrow(test)
KNNtest = test[,c(-1,-15,-2,-3,-4,-5)]
knnout =  knn(data.frame(KNNtrain),data.frame(KNNtest),train$Crime, k = 1)
#Confusion Matrix
table(knnout, (test$Crime))
#Percentage Correct
(45 +45)/nrow(test)
knnout =  knn(data.frame(KNNtrain),data.frame(KNNtest),train$Crime, k = 10)
#Confusion Matrix
table(knnout, (test$Crime))
#Percentage Correct
(45 +45)/nrow(test)
(45 +42)/nrow(test)
#Problem 4.7.10 James
source('~/Documents/Columbia/Courses/Inference_Modeling/Project/Rcode-Final-Bob.R', echo=TRUE)
fit = lm(MaxHR ~ poly(Age,degree =1, raw = TRUE),data = Heart.train)
print(summary(fit))
fit = lm(MaxHR ~ poly(Age,degree =2, raw = TRUE),data = Heart.train)
print(summary(fit))
fit = lm(MaxHR ~ poly(Age,degree =6, raw = TRUE),data = Heart.train)
print(summary(fit))
plot(dis_graph)
mat = matrix(c(0, 0.3, 0.4, 0.7, 0.3, 0, 0.5, 0.8, 0.4, 0.5, 0.0, 0.45, 0.7, 0.8, 0.45, 0.0), nrow=4)
dis_mat = as.dist(mat)
dis_graph = hclust(mat, method="complete")
plot(dis_graph)
mat = matrix(c(0, 0.3, 0.4, 0.7, 0.3, 0, 0.5, 0.8, 0.4, 0.5, 0.0, 0.45, 0.7, 0.8, 0.45, 0.0), nrow=4)
dis_mat = as.dist(mat)
dis_graph = hclust(mat, method="complete")
plot(dis_graph)
mat = matrix(c(0, 0.3, 0.4, 0.7, 0.3, 0, 0.5, 0.8, 0.4, 0.5, 0.0, 0.45, 0.7, 0.8, 0.45, 0.0), nrow=4)
dis_mat = as.dist(mat)
dis_graph = hclust(mat, method="complete")
dis_graph = hclust(dis_mat, method="complete")
plot(dis_graph)
mtext("test")
mtext("test",line = 0)
mtext("test",line = 10)
mtext("test",line = 3)
mtext("test",line = -3)
?mtext
mtext("test",at = c (1,1))
mtext("test",at = c (2,1))
mtext("test",at = c (2,0))
mtext("test",at = c (3,0))
mtext("test",at = c (3,2))
mtext("test",at = c (3,1))
mtext("test",at = c (3,-1))
mtext("test",at = c (3,-2))
mtext("test",at = c (3,-4))
mtext("test",at = c (3,0))
mtext("test",at = c (4,0))
mtext("test",at = c (4,1))
mtext("test",at = c (4,-1))
mtext("test",at = c (4,0.5))
mtext("test",at = c (3))
plot(dis_graph)
plot(x1,x2)
obs = c(1,2,3,4,5,6)
x1 = c(1,1,0,5,6,4)
x2 = c(4,3,4,1,2,0)
plot(x1,x2)
set.seed(1)
lan = sample(2, nrow(x1))
print(lab)
set.seed(1)
lab = sample(2, nrow(x1))
print(lab)
lab = sample(2, nrow(x1))
lab = sample(2, length(x1))
print(lab)
lab = sample(2, length(x1))
lab = sample(2, length(x1), replace = TRUE)
print(lab)
obs = c(1,2,3,4,5,6)
x1 = c(1,1,0,5,6,4)
x2 = c(4,3,4,1,2,0)
plot(x1,x2)
```
Part B
```{r}
set.seed(1)
lab = sample(2, length(x1), replace = TRUE)
print(lab)
lab == 0
plot(x1,x2, labels = lab)
plot(x1,x2, col = lab)
set.seed(1)
lab = sample(2, length(x1), replace = TRUE)
print(lab)
plot(x1,x2, col = lab)
cent1 = mean(x1[lab == 1] +x2[lab == 1])
cent2 = mean(x1[lab == 0] +x2[lab == 0])
cent1
cent2
x1
x2
cent2 = mean(x1[lab == 0] +x2[lab == 0])
cent1
cent2
cent2 = mean(x1[lab == 2] +x2[lab == 2])
cent2
cent1 = mean(x1[lab == 1] +x2[lab == 1])
cent2 = mean(x1[lab == 2] +x2[lab == 2])
cent1
cent2
cent1 = c(mean(x1[lab == 1,1]  x2[lab == 1,1]), mean(x1[lab == 1,2]  x2[lab == 1,2]))
cent1 = c(mean(x1[lab == 1,1] + x2[lab == 1,1]), mean(x1[lab == 1,2]+x2[lab == 1,2]))
x1[lab == 1,1]
cent1 = c(mean(x1[lab == 1]), mean(x2[lab == 1,2]))
cent1 = c(mean(x1[lab == 1]), mean(x2[lab == 1,2]))
cent1 = c(mean(x1[lab == 1]), mean(x2[lab == 1]))
cent1
cent2 = c(mean(x1[lab == 2]), mean(x2[lab == 2]))
cent2
plot(x1,x2, col = lab)
points(cent1[1],cent1[2],pch = "20")
points(cent1[1],cent1[2],pch = "19")
plot(x1,x2, col = lab)
points(cent1[1],cent1[2],pch = "19")
points(cent2[1],cent2[2],pch = "20")
points(cent2[1],cent2[2],pch = "20", col=lab[2])
points(cent2[1],cent2[2],pch = "20", col="red")
lab
lab
x1
x2
lab(3) = 1
lab(5) = 2
lab[3] = 1
lab[5] = 2
cent1 = c(mean(x1[lab == 1]), mean(x2[lab == 1]))
cent2 = c(mean(x1[lab == 2]), mean(x2[lab == 2]))
plot(x1,x2, col = lab)
points(cent1[1],cent1[2],pch = "19")
points(cent2[1],cent2[2],pch = "20", col="red")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("dygraphs")
install.packages("xts")
install.packages("openxlsx")
install.packages("gridExtra")
install.packages("knitr")
x = rnorm(100)
xm = matrx(x,nrow - 10, ncol = 10)
xm = matrix(x,nrow - 10, ncol = 10)
xm = matrix(x,nrow = 10, ncol = 10)
xm
sum(xm)
rnorm(mean = 0)
x = rnorm(100,mean = 0)
xm = matrix(x,nrow = 10, ncol = 10)
sum(xm)
x = rnorm(100,mean = rep(0,100))
xm = matrix(x,nrow = 10, ncol = 10)
xm
sum(xm)
shiny::runApp('Documents/Columbia/Courses/Applied_Data_Science/project2-group3/doc/map')
getwd()
library(gdata)
library(ggplot2)
library(plyr)
library(xlsx)
library(chron)
library(RColorBrewer)
library(lattice)
library(ncdf4)
library(RNetCDF)
library(dplyr)
setwd("/Users/bobminnich/Documents/Columbia/Courses/DataVisualization/Homework2/EDAV_Project2_Code")
df = readRDS("GlobalFloodsRecord.rds")
df$Displaced = as.numeric(df$Displaced)
df$Dead = as.numeric(df$Dead)
df$Country = as.factor(df$Country)
df$Centroid.X = as.numeric(as.character(df$Centroid.X))
df$Centroid.Y = as.numeric(as.character(df$Centroid.Y))
df$Magnitude..M... = as.numeric(as.character(df$Magnitude..M...))
df$Affected.sq.km = as.numeric(as.character(df$Affected.sq.km))
df$Duration.in.Days = as.numeric(as.character(df$Duration.in.Days))
ele = readRDS("elevation.RDS")
df = cbind(df,ele)
#setwd("/Users/bobminnich/Documents/Columbia/Courses/DataVisualization/Homework2/EDAV_Project2_Code/Project2")
startend = read.csv("Start_End.csv", header = TRUE)
df$Began = as.Date(startend$Start, "%d-%b-%y")
df$Ended = as.Date(startend$End, "%d-%b-%y")
month_clean <- data.frame(do.call('rbind', strsplit(as.character(df$Began),"-")))
colnames(month_clean) = c("Year", "Month", "Day")
df$Year = as.factor(month_clean$Year)
df$Month = as.factor(month_clean$Month)
df$Day = as.factor(month_clean$Day)
#Split between northen and southern
southern = df$latitude < 0
df$hem[southern] = "S"
df$hem[!southern] = "N"
df$Country = as.character(df$Country)
USA03 = filter(df, Country == "USA" & Year == "2013")
qplot(Month, data=USA03, geom="bar", fill= Month) +
#labs(title = "Floods by Month in USA, 2003") +
scale_x_discrete(limits=c(1,2,3,4,5,6,7,8,9,10,11,12)) +
labs(x="Month") +
labs(y="Total") +
theme_classic() +
theme(legend.position="none")
View(df)
str(df$Country)
str(df$Year)
df$Year = as.numeric(month_clean$Year)
df$Year = as.numeric(month_clean$Year)
df$Month = as.numeric(month_clean$Month)
df$Day = as.numeric(month_clean$Day)
#Split between northen and southern
southern = df$latitude < 0
df$hem[southern] = "S"
df$hem[!southern] = "N"
df$Country = as.character(df$Country)
USA03 = filter(df, Country == "USA" & Year == "2013")
qplot(Month, data=USA03, geom="bar", fill= Month) +
#labs(title = "Floods by Month in USA, 2003") +
scale_x_discrete(limits=c(1,2,3,4,5,6,7,8,9,10,11,12)) +
labs(x="Month") +
labs(y="Total") +
theme_classic() +
theme(legend.position="none")
USA03
USA03 = filter(df, Country == "USA" & Year == 2013)
dim(USA03)
df$Country = as.character(df$Country)
USA03 = filter(df, Country == "USA" & Year == 2013)
USA03
?filter
library(plyr)
USA03 = filter(df, Country == "USA" & Year == 2013)
USA03
